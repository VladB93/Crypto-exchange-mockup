{"version":3,"sources":["consts.js","api.js","price-table.js","App.js","reducers/index.js","reducers/channel.js","serviceWorker.js","index.js"],"names":["pairs","KrakenSocket","prop","_this","this","Object","classCallCheck","store","socket","WebSocket","onopen","send","JSON","stringify","event","pair","subscription","name","onmessage","handleMessage","bind","channels","msg","handleEvents","parse","data","response","push","channelID","ask","bid","undefined","channel","find","el","parseFloat","toFixed","dispatch","type","payload","PriceTable","props","react_default","a","createElement","map","e","key","React","Component","connect","_ref","App","possibleConstructorReturn","getPrototypeOf","call","state","input","addPair","assertThisInitialized","subscribe","value","setState","_this2","className","price_table","onChange","inputChange","target","onClick","reducer","combineReducers","arguments","length","action","toConsumableArray","Boolean","window","location","hostname","match","__webpack_require__","d","__webpack_exports__","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a869a0d.chunk.js","sourcesContent":["export const pairs = [\r\n    'ADA/USD', \r\n    'EOS/USD', \r\n    'QTUM/USD', \r\n    'ETH/USD', \r\n    'LTC/USD', \r\n];\r\n","import { pairs } from './consts';\r\n\r\nexport default class KrakenSocket {\r\n    constructor(prop) {\r\n        this.store = prop;\r\n        this.socket = new WebSocket('wss://ws-sandbox.kraken.com');\r\n        this.socket.onopen = () => {\r\n            this.socket.send(JSON.stringify({\r\n                \"event\": \"subscribe\",\r\n                \"pair\": pairs,\r\n                \"subscription\": {\r\n                    \"name\": \"spread\", \r\n                }\r\n            }))\r\n        }\r\n        this.socket.onmessage = this.handleMessage.bind(this);\r\n        this.channels = [];\r\n    }\r\n\r\n    handleMessage(msg) {\r\n        this.handleEvents(JSON.parse(msg.data));\r\n    }\r\n\r\n    handleEvents(response) {\r\n        switch (response.event) {\r\n            case 'heartbeat':\r\n                break;\r\n            case 'subscriptionStatus':\r\n                this.channels.push({\r\n                    channelID: response.channelID,\r\n                    pair: response.pair,\r\n                    ask: '',\r\n                    bid: '',\r\n                });\r\n                break;\r\n            case undefined:\r\n                let channel = this.channels.find(el => el.channelID === response[0]);\r\n                channel['bid'] = parseFloat(response[1][0]).toFixed(4);\r\n                channel['ask'] = parseFloat(response[1][1]).toFixed(4);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.store.dispatch({\r\n            type: 'UPDATE',\r\n            payload: this.channels\r\n        });\r\n    }\r\n\r\n    subscribe(pair){\r\n        this.socket.send(JSON.stringify({\r\n            \"event\": \"subscribe\",\r\n            \"pair\": [pair],\r\n            \"subscription\": {\r\n                \"name\": \"spread\", \r\n            }\r\n        }))\r\n        \r\n    }\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass PriceTable extends React.Component {\r\n\r\n    render() {\r\n        let channels = this.props.channels;\r\n        return (\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            {\r\n                                channels.map((e) => (\r\n                                    <td key={e.channelID}>\r\n                                        <p>{e.pair}</p>\r\n                                        <span>ASK|</span>\r\n                                        <span>BID</span>\r\n                                    </td>\r\n                                ))\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            {\r\n                                channels.map((e) => (\r\n                                    <td key={e.channelID}>\r\n                                        <span>{e.ask}|</span>\r\n                                        <span>{e.bid}</span>\r\n                                    </td>\r\n                                ))\r\n                            }\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ channels }) {\r\n    return {\r\n        channels\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(PriceTable);","import React, { Component } from 'react';\nimport KrakenSocket from './api';\nimport PriceTable from './price-table';\nimport { store } from './index.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.socket = new KrakenSocket(store);\n    this.state = {\n      input: '',\n    }\n    this.addPair = this.addPair.bind(this);\n  }\n\n\n  addPair() {\n    this.socket.subscribe(this.state.input);\n  }\n\n  inputChange(value) {\n    this.setState({\n      input: value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <PriceTable />\n        Pair name\n        <input onChange={(e) => this.inputChange(e.target.value)} />\n        <button onClick={this.addPair}>Add Pair</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport channelReducer from './channel';\r\n\r\nconst reducer = combineReducers({\r\n    channels: channelReducer,\r\n})\r\n\r\nexport default reducer;","export default function (state = [], action) {\r\n\r\n    switch (action.type) {\r\n        case 'UPDATE':\r\n            return [...action.payload]\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers/index';\nimport * as serviceWorker from './serviceWorker';\n\nexport const store = createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}