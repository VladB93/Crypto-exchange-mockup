{"version":3,"sources":["consts.js","api/websocket_kraken_api.js","price-table.js","api/firebase_api.js","App.js","reducers/index.js","reducers/pairs.js","serviceWorker.js","index.js"],"names":["pairs","KrakenSocket","prop","_this","this","Object","classCallCheck","store","socket","WebSocket","onopen","send","JSON","stringify","event","pair","subscription","name","onmessage","handleMessage","bind","msg","handleEvents","parse","data","response","dispatch","type","payload","channelID","bid","ask","undefined","PriceTable","props","react_default","a","createElement","map","e","key","className","index","classColor","React","Component","connect","_ref","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","App","possibleConstructorReturn","getPrototypeOf","call","state","input","addPair","assertThisInitialized","inputChange","subscribe","setState","target","value","onClick","docID","collectionName","collection","doc","set","objectSpread","then","docRef","console","log","id","error","price_table","onChange","reducer","combineReducers","arguments","length","action","concat","toConsumableArray","_action$payload","el","shift","push","Boolean","window","location","hostname","match","__webpack_require__","d","__webpack_exports__","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.840430f4.chunk.js","sourcesContent":["export const pairs = [\r\n    'ADA/USD', \r\n    'EOS/USD', \r\n    'QTUM/USD', \r\n    'ETH/USD', \r\n    'LTC/USD', \r\n];\r\n","import { pairs } from '../consts';\r\n\r\nexport default class KrakenSocket {\r\n    constructor(prop) {\r\n        this.store = prop;\r\n        this.socket = new WebSocket('wss://ws-sandbox.kraken.com');\r\n        this.socket.onopen = () => {\r\n            this.socket.send(JSON.stringify({\r\n                \"event\": \"subscribe\",\r\n                \"pair\": pairs,\r\n                \"subscription\": {\r\n                    \"name\": \"spread\",\r\n                }\r\n            }))\r\n        }\r\n        this.socket.onmessage = this.handleMessage.bind(this);\r\n    }\r\n\r\n    handleMessage(msg) {\r\n        this.handleEvents(JSON.parse(msg.data));\r\n    }\r\n\r\n    handleEvents(response) {\r\n        switch (response.event) {\r\n            case 'heartbeat':\r\n                break;\r\n            case 'subscriptionStatus':\r\n                this.store.dispatch({\r\n                    type: 'CREATE_PAIR',\r\n                    payload: {\r\n                        channelID: response.channelID,\r\n                        pair: response.pair,\r\n                        bid: [],\r\n                        ask: [],\r\n                    }\r\n                });\r\n                break;\r\n            case undefined:\r\n                this.store.dispatch({\r\n                    type: 'UPDATE_PAIR',\r\n                    payload: {\r\n                        channelID: response[0],\r\n                        bid: response[1][0],\r\n                        ask: response[1][1]\r\n                    }\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    subscribe(pair) {\r\n        this.socket.send(JSON.stringify({\r\n            \"event\": \"subscribe\",\r\n            \"pair\": [pair],\r\n            \"subscription\": {\r\n                \"name\": \"spread\",\r\n            }\r\n        }));\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass PriceTable extends React.Component {\r\n\r\n    render() {\r\n        let pairs = this.props.pairs;\r\n        return (\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        {\r\n                            pairs.map((e) => (\r\n                                <td key={e.channelID}>\r\n                                    <p className=\"title\">{e.pair}</p>\r\n                                    <span>ASK</span>\r\n                                    <span className=\"right\">BID</span>\r\n                                </td>\r\n                            ))\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        {\r\n                            pairs.map((e, index) => {\r\n                                let classColor = e.ask[1] >= e.ask[0] ? 'green' : 'red';\r\n                                return <td key={index} className={classColor}>\r\n                                    <span>{e.ask[1]}|</span>\r\n                                    <span>{e.bid[1]}</span>\r\n                                </td>\r\n                            })\r\n                        }\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ pairs }) {\r\n    return {\r\n        pairs\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(PriceTable);","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCzzIbgLOLRWdWrSVVIopYTwr4H7HDnn00\",\r\n    authDomain: \"crypto-site-mockup.firebaseapp.com\",\r\n    databaseURL: \"https://crypto-site-mockup.firebaseio.com\",\r\n    projectId: \"crypto-site-mockup\",\r\n    storageBucket: \"crypto-site-mockup.appspot.com\",\r\n    messagingSenderId: \"104291122356\"\r\n};\r\nconst fireBaseApi = firebase.initializeApp(config);\r\nconst db = firebase.firestore();\r\n\r\nexport function registerUser(email, password, successCallback) {\r\n    fireBaseApi.auth().createUserWithEmailAndPassword(email, password).then(function () {\r\n        successCallback();\r\n    }, function (error) {\r\n        const errorCode = error.code;\r\n        const errorMessage = error.message;\r\n        console.log(errorMessage);\r\n        console.log(errorCode);\r\n    })\r\n}\r\n\r\nexport function signInUser(email, password, successCallback) {\r\n    fireBaseApi.auth().signInWithEmailAndPassword(email, password).then(function () {\r\n        successCallback();\r\n    }, function (error) {\r\n        const errorCode = error.code;\r\n        const errorMessage = error.message;\r\n        console.log(errorMessage);\r\n        console.log(errorCode);\r\n    })\r\n}\r\n\r\nexport function signOutUser(successCallback) {\r\n    fireBaseApi.auth().signOut().then(function () {\r\n        successCallback()\r\n    }).catch(function (error) {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nexport function singInUsingGoogle() {\r\n    const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n    fireBaseApi.auth().signInWithPopup(googleProvider).then(function (result) {\r\n        // const token = result.credential.accessToken;\r\n        // const user = result.user;\r\n    }).catch(function (error) {\r\n        // const errorCode = error.code;\r\n        // const errorMessage = error.message;\r\n        // const email = error.email;\r\n        // const credential = error.credential;\r\n    });\r\n}\r\n\r\nexport function addToCollection(docID, data, collectionName) {\r\n    db.collection(collectionName).doc(docID).set({\r\n        ...data\r\n    })\r\n        .then(function (docRef) {\r\n            console.log(\"Document written with ID: \", docRef.id);\r\n        }, function (error) {\r\n            console.error(\"Error adding document: \", error);\r\n        });\r\n}\r\n\r\nexport function readFromCollection(docID, collectionName) {\r\n    const docRef = db.collection(collectionName).doc(docID);\r\n    docRef.get().then(function (doc) {\r\n        if (doc.exists) {\r\n            console.log(\"Document data:\", doc.data());\r\n        } else {\r\n            // doc.data() will be undefined in this case\r\n            console.log(\"No such document!\");\r\n        }\r\n    }, function (error) {\r\n        console.log(\"Error getting document:\", error);\r\n    });\r\n}","import React, { Component } from 'react';\nimport KrakenSocket from './api/websocket_kraken_api';\nimport PriceTable from './price-table';\nimport { store } from './index.js';\nimport { registerUser, singInUsingGoogle, addToCollection } from './api/firebase_api';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.socket = new KrakenSocket(store);\n    this.state = {\n      input: '',\n    }\n    this.addPair = this.addPair.bind(this);\n    this.inputChange = this.inputChange.bind(this);\n  }\n\n  addPair() {\n    this.socket.subscribe(this.state.input);\n  }\n\n  inputChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={()=>addToCollection()}>Register User</button>\n        <PriceTable />\n        Pair name\n        <input onChange={this.inputChange} />\n        <button onClick={this.addPair}>Add Pair</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport pairsReducer from './pairs';\r\n\r\nconst reducer = combineReducers({\r\n    pairs: pairsReducer,\r\n})\r\n\r\nexport default reducer;","export default function (state = [], action) {\r\n\r\n    switch (action.type) {\r\n        case 'CREATE_PAIR':\r\n            return [...state, action.payload];\r\n        case 'UPDATE_PAIR':\r\n            const { channelID, bid, ask } = action.payload;\r\n            let pairs = state.map((el) => {\r\n                if (channelID === el.channelID) {\r\n                    if (el.bid.length === 0) {\r\n                        el.bid = [bid, bid];\r\n                        el.ask = [ask, ask];\r\n                    } else {\r\n                        if (el.bid[1] !== bid) {\r\n                            el.bid.shift();\r\n                            el.bid.push(bid);\r\n                        }\r\n                        if (el.ask[1] !== ask) {\r\n                            el.ask.shift();\r\n                            el.ask.push(ask);\r\n                        }\r\n                    }\r\n                }\r\n                return el;\r\n            })\r\n            return pairs;\r\n        default:\r\n            return state;\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers/index';\nimport * as serviceWorker from './serviceWorker';\n\nexport const store = createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}